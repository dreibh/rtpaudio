// ##########################################################################
// ####                                                                  ####
// ####                    Master Thesis Implementation                  ####
// ####  Management of Layered Variable Bitrate Multimedia Streams over  ####
// ####                  DiffServ with A Priori Knowledge                ####
// ####                                                                  ####
// #### ================================================================ ####
// ####                                                                  ####
// ####                                                                  ####
// #### Resource Utilization Point Inlines                               ####
// ####                                                                  ####
// #### Version 1.00  --  February 23, 2001                              ####
// ####                                                                  ####
// #### Copyright (C) 2000/2001 Thomas Dreibholz                         ####
// #### University of Bonn, Department of Computer Science IV            ####
// #### EMail: Dreibholz@bigfoot.com                                     ####
// #### WWW:   http://www.bigfoot.com/~dreibholz/diplom/index.html       ####
// ####                                                                  ####
// ##########################################################################


#ifndef RESOURCEUTILIZATIONPOINT_ICC
#define RESOURCEUTILIZATIONPOINT_ICC


#include "tdsystem.h"
#include "resourceutilizationpoint.h"


namespace Coral {


// ###### Operator "==" #####################################################
inline int ResourceUtilizationPoint::operator==(const ResourceUtilizationPoint& rup) const
{
   if((Bandwidth     != rup.Bandwidth)              ||
      (fabs(Utilization - rup.Utilization) > 0.001) ||
      (Layers        != rup.Layers)                 ||
      (fabs(FrameRate - rup.FrameRate) > 0.001)) {
      return(0);
   }
   for(cardinal i = 0;i < Layers;i++) {
      if(LayerBandwidthInfo[i] != rup.LayerBandwidthInfo[i]) {
         return(0);
      }
   }
   return(1);
}


// ###### Operator "!=" #####################################################
inline int ResourceUtilizationPoint::operator!=(const ResourceUtilizationPoint& rup) const
{
   return(!(*this == rup));
}


// ###### Swap resource/utilization points ##################################
inline void ResourceUtilizationPoint::swapResourceUtilizationPoints(
                                         ResourceUtilizationPoint& a,
                                         ResourceUtilizationPoint& b)
{
   ResourceUtilizationPoint tmp = a;
   a = b;
   b = tmp;
}


// ###### Comparition of points for Graham Scan #############################
inline integer ResourceUtilizationPoint::ccw(
                  const ResourceUtilizationPoint& p0,
                  const ResourceUtilizationPoint& p1,
                  const ResourceUtilizationPoint& p2)
{
   // ResourceUtilizationPoint:
   //    x = Resource (Bandwidth)
   //    y = Utilization

   const double dx1 = (double)p1.Bandwidth - (double)p0.Bandwidth;
   const double dy1 = p1.Utilization - p0.Utilization;
   const double dx2 = (double)p2.Bandwidth - (double)p0.Bandwidth;
   const double dy2 = p2.Utilization - p0.Utilization;

   if(dx1 * dy2 > dy1 * dx2) {
      return(+1);
   }
   if(dx1 * dy2 < dy1 * dx2) {
      return(-1);
   }
   if((dx1 * dx2 < 0) || (dy1 * dy2 < 0)) {
      return(-1);
   }
   if((dx1 * dy1 + dy1 * dy1) < (dx2 * dx2 + dy2 * dy2)) {
      return(+1);
   }
   return(0);
}


}


#endif
